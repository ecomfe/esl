{"version":3,"sources":["esl.source.js"],"names":["define","require","esl","global","modFlagAuto","id","state","modIs","modAutos","Math","max","globalRequire","requireId","callback","monitor","indexOf","invalidIds","push","Array","i","l","length","Error","join","timeout","requireConf","waitSeconds","waitTimeout","clearTimeout","setTimeout","waitTimeoutNotice","actualGlobalRequire","checkError","hard","visited","MODULE_DEFINED","mod","modModules","MODULE_PREPARED","hang","hangModulesMap","hangModules","depMs","dep","absId","missModulesMap","missModules","modCompletePreDefine","ids","waitings","wait4PreDefine","waitingsLen","idsLen","j","modPreDefine","deps","factory","globalDefine","dependencies","opera","window","document","attachEvent","toString","currentScript","getCurrentScript","loadingURL4Modules","getAttribute","moduleConfigGetter","conf","config","this","depsDec","factoryDeps","exports","createLocalRequire","depMkv","depRs","modSetState","MODULE_PRE_DEFINED","modPrepare","MODULE_ANALYZED","hardDependsCount","min","replace","$0","$1","depId","requireModules","depResources","index","idInfo","parseId","normalize","moduleInfo","resInfo","BUILDIN_MODULE","res","modInitFactoryInvoker","nativeAsyncRequire","modAutoDefine","isAutoDefining","autoDefineRepeat","action","modUpdatePreparedState","modTryInvokeFactory","update","moduleUpdatingStates","prepared","invokeFactory","invoking","factoryReady","apply","modGetModulesExports","module","ex","test","message","hardCirclurDep","RegExp","modDefined","modules","buildinModules","args","modAddListener","listener","listeners","modListeners","userHook","moduleChangeListeners","stateListeners","getModState","loadingModules","MODULE_LOADING","MODULE_NOT_FOUND","getContextLoadFn","src","loadModule","baseId","tryFinishRequire","isCallbackCalled","isAllCompleted","loaderValue","undef","context","load","getModuleState","li","ll","loaders","loadResource","moduleId","moduleSrc","createScript","shimConf","init","shimDeps","exportsSegs","split","loadId","bundleIdRetrieve","toUrl","shim","shimDep","pluginAndResource","pluginOnload","value","resource","bundleModuleId","fromText","text","Function","plugin","pluginRequire","call","createKVSortedIndex","allowAsterisk","key","hasOwnProperty","k","v","reg","createPrefixRegexp","sort","descSorterByKOrName","createConfIndex","baseUrl","pathsIndex","paths","mappingIdIndex","map","mappingIdIndexLen","lastMapItem","lastMapItemMatchAll","item","concat","packageNames","packageLen","packages","packagesIndex","pkg","packageConf","name","location","main","urlArgsIndex","urlArgs","bundlesIndex","bundlesRegExpIndex","bundles","bundlesItems","bundleId","resolvePackageId","indexRetrieve","hitBehavior","source","extReg","queryReg","extname","query","isPathMap","url","parseIds","flagState","pureModules","normalizedIds","resId","normalizedId","trueResId","mods","req","requiredCache","topLevelId","parseResult","fetch","fetchFinish","finishedLen","resourceId","relative2absolute","mdValue","mdKey","segs","slice","seg","pop","prefix","a","b","aValue","bValue","currentlyAddingScript","interactiveScript","readyState","scripts","getElementsByTagName","scriptLen","script","onload","innerOnload","onreadystatechange","loadingURLs","createElement","setAttribute","async","onNodeCreated","baseElement","headElement","insertBefore","appendChild","version","ModuleState","NOT_FOUND","LOADING","PRE_DEFINED","ANALYZED","PREPARED","DEFINED","listenModuleStateChange","unlistenModuleStateChange","len","splice","addLoader","loader","removeLoader","amd",":hook","newValue","oldValue","parentNode","requirejs","mainModule"],"mappings":"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","file":"esl.js","sourcesContent":["/**\n * ESL (Enterprise Standard Loader)\n * Copyright 2013 Baidu Inc. All rights reserved.\n *\n * @file Browser端标准加载器，符合AMD规范\n * @author errorrik(errorrik@gmail.com)\n *         Firede(firede@firede.us)\n */\n\n/* eslint-disable no-unused-vars */\n/* jshint ignore:start */\nvar define;\nvar require;\nvar esl;\n/* jshint ignore:end */\n/* eslint-enable no-unused-vars */\n\n/* eslint-disable guard-for-in */\n/* eslint-env amd:false */\n\n(function (global) {\n    // \"mod\"开头的变量或函数为内部模块管理函数\n    // 为提高压缩率，不使用function或object包装\n\n    var undef;\n\n    /**\n     * 模块容器\n     *\n     * @inner\n     * @type {Object}\n     */\n    var modModules = {};\n\n    // 模块状态枚举量\n    var MODULE_NOT_FOUND = -1;\n    var MODULE_LOADING = 0;\n    var MODULE_PRE_DEFINED = 1;\n    var MODULE_ANALYZED = 2;\n    var MODULE_PREPARED = 3;\n    var MODULE_DEFINED = 4;\n\n    /**\n     * 自动定义的模块表\n     *\n     * 模块define factory是用到时才执行，但是以下几种情况需要自动马上执行：\n     * 1. require([moduleId], callback)\n     * 2. plugin module and plugin resource: require('plugin!resource')\n     * 3. shim module\n     *\n     * @inner\n     * @type {Object}\n     */\n    var modAutos = {};\n\n    /**\n     * 正在加载的模块列表\n     *\n     * @inner\n     * @type {Object}\n     */\n    var loadingModules = {};\n\n    /**\n     * 标记模块自动进行定义\n     *\n     * @inner\n     * @param {string} id 模块id\n     * @param {number} state 模块的状态\n     */\n    function modFlagAuto(id, state) {\n        if (!modIs(id, state)) {\n            modAutos[id] = Math.max(modAutos[id] || 0, state);\n        }\n    }\n\n    /**\n     * 内建module名称集合\n     *\n     * @inner\n     * @type {Object}\n     */\n    var BUILDIN_MODULE = {\n        require: globalRequire,\n        exports: 1,\n        module: 1\n    };\n\n    /**\n     * 全局require函数\n     *\n     * @inner\n     * @type {Function}\n     */\n    var actualGlobalRequire = createLocalRequire();\n\n    // #begin-ignore\n    /**\n     * 超时提醒定时器\n     *\n     * @inner\n     * @type {number}\n     */\n    var waitTimeout;\n    // #end-ignore\n\n    /**\n     * require配置\n     *\n     * @inner\n     * @type {Object}\n     */\n    var requireConf = {\n        /* eslint-disable */\n        baseUrl    : './',\n        paths      : {},\n        config     : {},\n        map        : {},\n        packages   : [],\n        shim       : {},\n        waitSeconds: 0,\n        bundles    : {},\n        urlArgs    : {}\n        /* eslint-enable */\n    };\n\n    /**\n     * 加载模块\n     *\n     * @param {string|Array} requireId 模块id或模块id数组，\n     * @param {Function=} callback 加载完成的回调函数\n     * @return {*} requireId为string时返回模块暴露对象\n     */\n    function globalRequire(requireId, callback) {\n        // #begin-ignore\n        // #begin assertNotContainRelativeId\n        // 确定require的模块id不包含相对id。用于global require，提前预防难以跟踪的错误出现\n        var invalidIds = [];\n\n        /**\n         * 监测模块id是否relative id\n         *\n         * @inner\n         * @param {string} id 模块id\n         */\n        function monitor(id) {\n            if (id.indexOf('.') === 0) {\n                invalidIds.push(id);\n            }\n        }\n\n        if (typeof requireId === 'string') {\n            monitor(requireId);\n        }\n        else if (requireId instanceof Array) {\n            for (var i = 0, l = requireId.length; i < l; i++) {\n                monitor(requireId[i]);\n            }\n        }\n\n        // 包含相对id时，直接抛出错误\n        if (invalidIds.length > 0) {\n            throw new Error(\n                '[REQUIRE_FATAL]Relative ID is not allowed in global require: '\n                + invalidIds.join(', ')\n            );\n        }\n        // #end assertNotContainRelativeId\n\n        // 超时提醒\n        var timeout = requireConf.waitSeconds;\n        if (timeout && (requireId instanceof Array)) {\n            if (waitTimeout) {\n                clearTimeout(waitTimeout);\n            }\n            waitTimeout = setTimeout(waitTimeoutNotice, timeout * 1000);\n        }\n        // #end-ignore\n\n        return actualGlobalRequire(requireId, callback);\n    }\n\n    /**\n     * 版本号\n     *\n     * @type {string}\n     */\n    globalRequire.version = '2.2.2-beta.2';\n\n    /**\n     * 将模块标识转换成相对的url\n     *\n     * @param {string} id 模块标识\n     * @return {string}\n     */\n    globalRequire.toUrl = actualGlobalRequire.toUrl;\n\n    /**\n     * 加载模块。load only，不执行factory define\n     *\n     * @param {Array} ids 模块id数组，\n     * @param {Function=} callback 加载完成的回调函数\n     */\n    globalRequire.fetch = actualGlobalRequire.fetch;\n\n    /**\n     * 模块状态枚举\n     *\n     * @type {Object}\n     */\n    globalRequire.ModuleState = {\n        NOT_FOUND: MODULE_NOT_FOUND,\n        LOADING: MODULE_LOADING,\n        PRE_DEFINED: MODULE_PRE_DEFINED,\n        ANALYZED: MODULE_ANALYZED,\n        PREPARED: MODULE_PREPARED,\n        DEFINED: MODULE_DEFINED\n    };\n\n    var moduleChangeListeners = {};\n\n    globalRequire.listenModuleStateChange = function (id, state, listener) {\n        if (typeof listener === 'function'\n            && state >= MODULE_PRE_DEFINED && state <= MODULE_DEFINED\n        ) {\n            if (modIs(id, state)) {\n                var mod = modModules[id];\n                listener(mod.id, mod.deps, mod.factory);\n            }\n            else {\n                var listeners = moduleChangeListeners[id];\n                if (!listeners) {\n                    listeners = moduleChangeListeners[id] = {};\n                }\n\n                listeners[state] = listeners[state] || [];\n                listeners[state].push(listener);\n            }\n        }\n    };\n\n    globalRequire.unlistenModuleStateChange = function (id, state, listener) {\n        var listeners = moduleChangeListeners[id];\n\n        if (listeners) {\n            if (!listener) {\n                listeners[state] = null;\n            }\n            else {\n                var stateListeners = listeners[state];\n                var len = stateListeners && stateListeners.length;\n                while (len--) {\n                    if (stateListeners[len] === listener) {\n                        stateListeners.splice(len, 1);\n                    }\n                }\n            }\n        }\n    };\n\n    globalRequire.undef = function (id) {\n        delete loadingModules[id];\n        delete modModules[id];\n    };\n\n    /**\n     * 加载器容器对象\n     *\n     * @type {Array.<Function>}\n     */\n    var loaders = [];\n\n    /**\n     * 添加加载器\n     *\n     * @param {Function} loader 加载器函数\n     */\n    globalRequire.addLoader = function (loader) {\n        if (typeof loader === 'function') {\n            loaders.push(loader);\n        }\n    };\n\n    /**\n     * 移除加载器\n     *\n     * @param {Function} loader 加载器函数\n     */\n    globalRequire.removeLoader = function (loader) {\n        var len = loaders.length;\n        while (len--) {\n            if (loader === loaders[len]) {\n                loaders.splice(len, 1);\n            }\n        }\n    };\n\n    // #begin-ignore\n    /**\n     * 超时提醒函数\n     *\n     * @inner\n     */\n    function waitTimeoutNotice() {\n        var hangModules = [];\n        var missModules = [];\n        var hangModulesMap = {};\n        var missModulesMap = {};\n        var visited = {};\n\n        /**\n         * 检查模块的加载错误\n         *\n         * @inner\n         * @param {string} id 模块id\n         * @param {boolean} hard 是否装载时依赖\n         */\n        function checkError(id, hard) {\n            if (visited[id] || modIs(id, MODULE_DEFINED)) {\n                return;\n            }\n\n            visited[id] = 1;\n            var mod = modModules[id];\n            if (!mod) {\n                if (!missModulesMap[id]) {\n                    missModulesMap[id] = 1;\n                    missModules.push(id);\n                }\n            }\n            else if (hard || !modIs(id, MODULE_PREPARED) || mod.hang) {\n                if (!hangModulesMap[id]) {\n                    hangModulesMap[id] = 1;\n                    hangModules.push(id);\n                }\n\n                if (mod.depMs) {\n                    for (var i = 0, l = mod.depMs.length; i < l; i++) {\n                        var dep = mod.depMs[i];\n                        checkError(dep.absId, dep.hard);\n                    }\n                }\n            }\n        }\n\n        for (var id in modAutos) {\n            if (modAutos[id] >= MODULE_DEFINED) {\n                checkError(id, 1);\n            }\n        }\n\n        if (hangModules.length || missModules.length) {\n            throw new Error(\n                '[MODULE_TIMEOUT]Hang: '\n                + (hangModules.join(', ') || 'none')\n                + '; Miss: '\n                + (missModules.join(', ') || 'none')\n            );\n        }\n\n\n    }\n    // #end-ignore\n\n    /**\n     * 未预定义的模块集合\n     * 主要存储匿名方式define的模块\n     *\n     * @inner\n     * @type {Array}\n     */\n    var wait4PreDefine = [];\n\n    /**\n     * 完成模块预定义，此时处理的模块是匿名define的模块\n     *\n     * @inner\n     * @param {string} ids 匿名define的模块的id\n     */\n    function modCompletePreDefine(ids) {\n        var waitings = wait4PreDefine;\n        var waitingsLen = wait4PreDefine.length;\n\n        if (waitingsLen) {\n            var waitings = wait4PreDefine;\n            var idsLen = ids ? ids.length : 0;\n            wait4PreDefine = [];\n\n            for (var i = 0; i < waitingsLen; i++) {\n                var mod = waitings[i];\n                for (var j = 0; j < idsLen; j++) {\n                    modPreDefine(ids[j], mod.deps, mod.factory);\n                }\n            }\n        }\n    }\n\n    /**\n     * 定义模块\n     *\n     * @param {string=} id 模块标识\n     * @param {Array=} dependencies 依赖模块列表\n     * @param {Function=} factory 创建模块的工厂方法\n     */\n    function globalDefine(id, dependencies, factory) {\n        // define(factory)\n        // define(dependencies, factory)\n        // define(id, factory)\n        // define(id, dependencies, factory)\n        if (factory == null) {\n            if (dependencies == null) {\n                factory = id;\n                id = null;\n            }\n            else {\n                factory = dependencies;\n                dependencies = null;\n                if (id instanceof Array) {\n                    dependencies = id;\n                    id = null;\n                }\n            }\n        }\n\n        if (factory == null) {\n            return;\n        }\n\n        var opera = window.opera;\n\n        var ids;\n        // IE下通过current script的attribute获取当前id\n        if (!id\n            && document.attachEvent\n            && (!(opera && opera.toString() === '[object Opera]'))\n        ) {\n            var currentScript = getCurrentScript();\n            ids = currentScript && loadingURL4Modules[currentScript.getAttribute('data-src')];\n        }\n\n        if (id) {\n            modPreDefine(id, dependencies, factory);\n        }\n        else if (ids instanceof Array) {\n            for (var i = 0, l = ids.length; i < l; i++) {\n                modPreDefine(ids[i], dependencies, factory);\n            }\n        }\n        else {\n            // 纪录到共享变量中，在load或readystatechange中处理\n            // 标准浏览器下，使用匿名define时，将进入这个分支\n            wait4PreDefine[0] = {\n                deps: dependencies,\n                factory: factory\n            };\n        }\n    }\n\n    globalDefine.amd = {};\n\n    /**\n     * 模块配置获取函数\n     *\n     * @inner\n     * @return {Object} 模块配置对象\n     */\n    function moduleConfigGetter() {\n        var conf = requireConf.config[this.id];\n        if (conf && typeof conf === 'object') {\n            return conf;\n        }\n\n        return {};\n    }\n\n    /**\n     * 预定义模块\n     *\n     * @inner\n     * @param {string} id 模块标识\n     * @param {Array.<string>} dependencies 显式声明的依赖模块列表\n     * @param {*} factory 模块定义函数或模块对象\n     */\n    function modPreDefine(id, dependencies, factory) {\n        // 将模块存入容器\n        //\n        // 模块内部信息包括\n        // -----------------------------------\n        // id: module id\n        // depsDec: 模块定义时声明的依赖\n        // deps: 模块依赖，默认为['require', 'exports', 'module']\n        // factory: 初始化函数或对象\n        // factoryDeps: 初始化函数的参数依赖\n        // exports: 模块的实际暴露对象（AMD定义）\n        // config: 用于获取模块配置信息的函数（AMD定义）\n        // state: 模块当前状态\n        // require: local require函数\n        // depMs: 实际依赖的模块集合，数组形式\n        // depMkv: 实际依赖的模块集合，表形式，便于查找\n        // depRs: 实际依赖的资源集合\n        // ------------------------------------\n        if (!modModules[id]) {\n            /* eslint-disable */\n            modModules[id] = {\n                id         : id,\n                depsDec    : dependencies,\n                deps       : dependencies || ['require', 'exports', 'module'],\n                factoryDeps: [],\n                factory    : factory,\n                exports    : {},\n                config     : moduleConfigGetter,\n                state      : 0,\n                require    : createLocalRequire(id),\n                depMs      : [],\n                depMkv     : {},\n                depRs      : [],\n                hang       : 0\n            };\n            /* eslint-enable */\n            modSetState(id, MODULE_PRE_DEFINED);\n        }\n    }\n\n    /**\n     * 开始执行模块定义前的准备工作\n     *\n     * 首先，完成对factory中声明依赖的分析提取\n     * 然后，尝试加载\"资源加载所需模块\"\n     *\n     * 需要先加载模块的原因是：如果模块不存在，无法进行resourceId normalize化\n     *\n     * @inner\n     * @param {string} id 模块id\n     */\n    function modPrepare(id) {\n        var mod = modModules[id];\n        if (!mod || modModules[id].state >= MODULE_ANALYZED) {\n            return;\n        }\n\n        var deps = mod.deps;\n        var factory = mod.factory;\n        var hardDependsCount = 0;\n\n        // 分析function body中的require\n        // 如果包含显式依赖声明，根据AMD规定和性能考虑，可以不分析factoryBody\n        if (typeof factory === 'function') {\n            hardDependsCount = Math.min(factory.length, deps.length);\n\n            // If the dependencies argument is present, the module loader\n            // SHOULD NOT scan for dependencies within the factory function.\n            !mod.depsDec && factory.toString()\n                .replace(/(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg, '')\n                .replace(/require\\(\\s*(['\"])([^'\"]+)\\1\\s*\\)/g,\n                    function ($0, $1, depId) {\n                        deps.push(depId);\n                    }\n                );\n        }\n\n        var requireModules = [];\n        var depResources = [];\n        for (var index = 0, l = deps.length; index < l; index++) {\n            var depId = deps[index];\n            var idInfo = parseId(depId);\n            var absId = normalize(idInfo.mod, id);\n            var moduleInfo = null;\n            var resInfo = null;\n\n            if (absId && !BUILDIN_MODULE[absId]) {\n                // 如果依赖是一个资源，将其信息添加到module.depRs\n                //\n                // module.depRs中的项有可能是重复的。\n                // 在这个阶段，加载resource的module可能还未defined，\n                // 导致此时resource id无法被normalize。\n                //\n                // 比如对a/b/c而言，下面几个resource可能指的是同一个资源：\n                // - js!../name.js\n                // - js!a/name.js\n                // - ../../js!../name.js\n                //\n                // 所以加载资源的module ready时，需要遍历module.depRs进行处理\n                if (idInfo.res) {\n                    resInfo = {\n                        id: depId,\n                        mod: absId,\n                        res: idInfo.res\n                    };\n                    depResources.push(depId);\n                    mod.depRs.push(resInfo);\n                }\n\n                // 对依赖模块的id normalize能保证正确性，在此处进行去重\n                moduleInfo = mod.depMkv[absId];\n                if (!moduleInfo) {\n                    moduleInfo = {\n                        id: idInfo.mod,\n                        absId: absId,\n                        hard: index < hardDependsCount\n                    };\n                    mod.depMs.push(moduleInfo);\n                    mod.depMkv[absId] = moduleInfo;\n                    requireModules.push(absId);\n                }\n            }\n            else {\n                moduleInfo = {absId: absId};\n            }\n\n            // 如果当前正在分析的依赖项是define中声明的，\n            // 则记录到module.factoryDeps中\n            // 在factory invoke前将用于生成invoke arguments\n            if (index < hardDependsCount) {\n                mod.factoryDeps.push(resInfo || moduleInfo);\n            }\n        }\n\n        modSetState(id, MODULE_ANALYZED);\n        modInitFactoryInvoker(id);\n        nativeAsyncRequire(requireModules);\n        depResources.length && mod.require(\n            depResources,\n            function () {\n                if (mod.depRs) {\n                    for (var i = 0, l = mod.depRs.length; i < l; i++) {\n                        var res = mod.depRs[i];\n                        if (!res.absId) {\n                            res.absId = normalize(res.id, id);\n                        }\n                    }\n                }\n                modAutoDefine();\n            }\n        );\n    }\n\n    var isAutoDefining;\n    var autoDefineRepeat;\n\n    /**\n     * 对一些需要自动定义的模块进行自动定义\n     *\n     * @inner\n     */\n    function modAutoDefine() {\n        if (isAutoDefining) {\n            autoDefineRepeat = true;\n            return;\n        }\n\n        isAutoDefining = true;\n\n        for (var id in modAutos) {\n            var action = modAutos[id];\n\n            if (action >= MODULE_PREPARED) {\n                modPrepare(id);\n                modUpdatePreparedState(id);\n            }\n\n            if (action >= MODULE_DEFINED) {\n                modTryInvokeFactory(id);\n            }\n        }\n\n        isAutoDefining = false;\n\n        if (autoDefineRepeat) {\n            autoDefineRepeat = false;\n            modAutoDefine();\n        }\n    }\n\n    /**\n     * 更新模块的准备状态\n     *\n     * @inner\n     * @param {string} id 模块id\n     */\n    function modUpdatePreparedState(id) {\n        var moduleUpdatingStates = {};\n        update(id);\n\n        function update(id) {\n            modPrepare(id);\n            var mod = modModules[id];\n\n            if (!mod || mod.state < MODULE_ANALYZED) {\n                return false;\n            }\n\n            switch (moduleUpdatingStates[id]) {\n                case 1:\n                    return true;\n                case 2:\n                    return mod.state >= MODULE_PREPARED;\n            }\n\n            moduleUpdatingStates[id] = 1;\n            var prepared = true;\n\n            var depMs = mod.depMs;\n            for (var i = 0, l = depMs ? depMs.length : 0; i < l; i++) {\n                prepared = update(depMs[i].absId) && prepared;\n            }\n\n            // 判断resource是否加载完成。如果resource未加载完成，则认为未准备好\n            /* jshint ignore:start */\n            if (prepared) {\n                var depRs = mod.depRs;\n                for (var i = 0, l = depRs ? depRs.length : 0; i < l; i++) {\n                    if (!(prepared = !!depRs[i].absId)) {\n                        break;\n                    }\n                }\n            }\n            /* jshint ignore:end */\n\n            if (prepared) {\n                modSetState(id, MODULE_PREPARED);\n            }\n\n            moduleUpdatingStates[id] = 2;\n            return prepared;\n        }\n    }\n\n    /**\n     * 初始化模块定义时所需的factory执行器\n     *\n     * @inner\n     * @param {string} id 模块id\n     */\n    function modInitFactoryInvoker(id) {\n        var mod = modModules[id];\n        var invoking;\n\n        mod.invokeFactory = invokeFactory;\n\n        /**\n         * 初始化模块\n         *\n         * @inner\n         */\n        function invokeFactory() {\n            if (invoking || mod.state !== MODULE_PREPARED) {\n                return;\n            }\n\n            invoking = 1;\n\n            // 拼接factory invoke所需的arguments\n            var factoryReady = 1;\n            for (var i = 0, l = mod.factoryDeps.length; i < l; i++) {\n                var depId = mod.factoryDeps[i].absId;\n                if (!BUILDIN_MODULE[depId]) {\n                    modTryInvokeFactory(depId);\n                    if (!(factoryReady = modIs(depId, MODULE_DEFINED))) {\n                        break;\n                    }\n                }\n            }\n\n            if (factoryReady) {\n                try {\n                    // 调用factory函数初始化module\n                    var factory = mod.factory;\n                    var exports = typeof factory === 'function'\n                        ? factory.apply(global, modGetModulesExports(\n                                mod.factoryDeps,\n                                {\n                                    require: mod.require,\n                                    exports: mod.exports,\n                                    module: mod\n                                }\n                            ))\n                        : factory;\n\n                    if (exports != null) {\n                        mod.exports = exports;\n                    }\n\n                    mod.invokeFactory = null;\n                }\n                catch (ex) {\n                    if (/^\\[MODULE_MISS\\]\"([^\"]+)/.test(ex.message)) {\n                        // 出错，则说明在factory的运行中，该require的模块是需要的\n                        // 所以把它加入强依赖中\n                        var hardCirclurDep = mod.depMkv[RegExp.$1];\n                        hardCirclurDep && (hardCirclurDep.hard = 1);\n\n                        // 如果是模块本身有问题导致的运行错误\n                        // 就不要把invoking置回去了，避免影响autoInvoke其他模块的初始化\n                        invoking = 0;\n                        return;\n                    }\n                    mod.hang = 1;\n                    throw ex;\n                }\n\n                // 完成define\n                // 不放在try里，避免后续的运行错误被这里吞掉\n                modDefined(id);\n            }\n        }\n    }\n\n    /**\n     * 判断模块是否完成相应的状态\n     *\n     * @inner\n     * @param {string} id 模块标识\n     * @param {number} state 状态码，使用时传入相应的枚举变量，比如`MODULE_DEFINED`\n     * @return {boolean} 是否完成相应的状态\n     */\n    function modIs(id, state) {\n        return modModules[id] && modModules[id].state >= state;\n    }\n\n    /**\n     * 尝试执行模块factory函数，进行模块初始化\n     *\n     * @inner\n     * @param {string} id 模块id\n     */\n    function modTryInvokeFactory(id) {\n        var mod = modModules[id];\n\n        if (mod && mod.invokeFactory) {\n            mod.invokeFactory();\n        }\n    }\n\n    /**\n     * 根据模块id数组，获取其的exports数组\n     * 用于模块初始化的factory参数或require的callback参数生成\n     *\n     * @inner\n     * @param {Array} modules 模块id数组\n     * @param {Object} buildinModules 内建模块对象\n     * @return {Array} 模块exports数组\n     */\n    function modGetModulesExports(modules, buildinModules) {\n        var args = [];\n        for (var i = 0, l = modules.length; i < l; i++) {\n            var id = modules[i];\n            if (typeof id === 'object') {\n                id = id.absId;\n            }\n\n            args[i] = buildinModules[id] || modModules[id].exports;\n        }\n\n        return args;\n    }\n\n    /**\n     * 模块状态变化事件监听器容器\n     *\n     * @inner\n     * @type {Object}\n     */\n    var modListeners = {};\n    modListeners[MODULE_ANALYZED] = {':hook': 'onModuleAnalyzed'};\n    modListeners[MODULE_DEFINED] = {':hook': 'onModuleDefined'};\n    modListeners[MODULE_PRE_DEFINED] = {':hook': 'onModulePreDefined'};\n    modListeners[MODULE_PREPARED] = {':hook': 'onModulePrepared'};\n\n    /**\n     * 添加模块状态变化的事件监听器\n     *\n     * @inner\n     * @param {string} id 模块标识\n     * @param {number} state 模块状态\n     * @param {Function} listener 监听函数\n     */\n    function modAddListener(id, state, listener) {\n        if (modIs(id, state)) {\n            listener();\n            return;\n        }\n\n        var listeners = modListeners[state][id];\n        if (!listeners) {\n            listeners = modListeners[state][id] = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    /**\n     * 设置模块状态\n     * 该函数会触发模块状态变化的事件\n     *\n     * @inner\n     * @param {string} id 模块标识\n     * @param {number} state 模块状态\n     */\n    function modSetState(id, state) {\n        var mod = modModules[id];\n        if (mod.state >= state) {\n            return;\n        }\n\n        mod.state = state;\n\n        var listeners = modListeners[state][id];\n        if (listeners instanceof Array) {\n            // 清理listeners\n            modListeners[state][id] = null;\n\n            for (var i = 0, l = listeners.length; i < l; i++) {\n                listeners[i]();\n            }\n        }\n\n\n        // call user hook\n        var userHook = requireConf[modListeners[state][':hook']];\n        if (typeof userHook === 'function') {\n            userHook(mod.id, mod.deps, mod.factory);\n        }\n\n        listeners = moduleChangeListeners[id];\n        var stateListeners = listeners && listeners[state];\n        if (stateListeners instanceof Array) {\n            for (var i = 0, l = stateListeners.length; i < l; i++) {\n                stateListeners[i](mod.id, mod.deps, mod.factory);\n            }\n        }\n    }\n\n    /**\n     * 模块状态切换为定义完成\n     *\n     * @inner\n     * @param {string} id 模块标识\n     */\n    function modDefined(id) {\n        delete modAutos[id];\n        modSetState(id, MODULE_DEFINED);\n    }\n\n    /**\n     * 获取模块状态\n     *\n     * @param {string} id 模块id\n     * @return {number}\n     */\n    function getModState(id) {\n        if (modModules[id]) {\n            return modModules[id].state;\n        }\n\n        if (loadingModules[id]) {\n            return MODULE_LOADING;\n        }\n\n        return MODULE_NOT_FOUND;\n    }\n\n    function getContextLoadFn(id) {\n        return function (src) {\n            if (!(loadingModules[id] || modModules[id])) {\n                loadModule(id, src);\n            }\n        };\n    }\n\n    /**\n     * 异步加载模块\n     * 内部使用，模块ID必须是经过normalize的Top-Level ID\n     *\n     * @inner\n     * @param {Array} ids 模块名称或模块名称列表\n     * @param {Function=} callback 获取模块完成时的回调函数\n     * @param {string} baseId 基础id，用于当ids是relative id时的normalize\n     */\n    function nativeAsyncRequire(ids, callback, baseId) {\n        var isCallbackCalled = 0;\n\n        for (var i = 0, l = ids.length; i < l; i++) {\n            var id = ids[i];\n\n            if (!(BUILDIN_MODULE[id] || modIs(id, MODULE_DEFINED))) {\n                modAddListener(id, MODULE_DEFINED, tryFinishRequire);\n\n                if (!(loadingModules[id] || modModules[id])) {\n                    var loaderValue = undef;\n                    var context = {\n                        id: id,\n                        load: getContextLoadFn(id),\n                        getModuleState: getModState\n                    };\n\n                    for (var li = 0, ll = loaders.length; li < ll; li++) {\n                        loaderValue = loaders[li](context, modAutoDefine);\n                        if (typeof loaderValue !== 'undefined') {\n                            break;\n                        }\n                    }\n\n                    if (typeof loaderValue === 'string') {\n                        loadModule(id, loaderValue);\n                    }\n                    else if (loaderValue !== false) {\n                        (id.indexOf('!') > 0)\n                            ? loadResource(id, baseId)\n                            : loadModule(id);\n                    }\n                }\n            }\n        }\n\n        tryFinishRequire();\n\n        /**\n         * 尝试完成require，调用callback\n         * 在模块与其依赖模块都加载完时调用\n         *\n         * @inner\n         */\n        function tryFinishRequire() {\n            if (typeof callback === 'function' && !isCallbackCalled) {\n                var isAllCompleted = 1;\n                \n                for (var i = 0, l = ids.length; i < l; i++) {\n                    var id = ids[i];\n                    if (!BUILDIN_MODULE[id]) {\n                        isAllCompleted = !!modIs(id, MODULE_DEFINED);\n                        if (!isAllCompleted) {\n                            break;\n                        }\n                    }\n                }\n\n                // 检测并调用callback\n                if (isAllCompleted) {\n                    isCallbackCalled = 1;\n\n                    callback.apply(\n                        global,\n                        modGetModulesExports(ids, BUILDIN_MODULE)\n                    );\n                }\n            }\n        }\n    }\n\n    var loadingURLs = {};\n    var loadingURL4Modules = {};\n\n    /**\n     * 加载模块\n     *\n     * @inner\n     * @param {string} moduleId 模块标识\n     * @param {string?} moduleSrc 模块对应Url\n     */\n    function loadModule(moduleId, moduleSrc) {\n        loadingModules[moduleId] = 1;\n\n        var loadId = bundleIdRetrieve(moduleId) || moduleId;\n        moduleSrc = moduleSrc || toUrl(loadId + '.js');\n\n        // 初始化相关 shim 的配置\n        var shimConf = requireConf.shim[moduleId];\n        if (shimConf instanceof Array) {\n            requireConf.shim[moduleId] = shimConf = {\n                deps: shimConf\n            };\n        }\n\n        // shim依赖的模块需要自动标识为shim\n        // 无论是纯正的shim模块还是hybird模块\n        var shimDeps = shimConf && (shimConf.deps || []);\n        if (shimDeps) {\n            for (var i = 0, l = shimDeps.length; i < l; i++) {\n                var shimDep = shimDeps[i];\n                if (!requireConf.shim[shimDep]) {\n                    requireConf.shim[shimDep] = {};\n                }\n            }\n            actualGlobalRequire(shimDeps, load);\n        }\n        else {\n            load();\n        }\n\n        /**\n         * 发送请求去加载模块\n         *\n         * @inner\n         */\n        function load() {\n            /* eslint-disable no-use-before-define */\n            if (!loadingURL4Modules[moduleSrc]) {\n                loadingURL4Modules[moduleSrc] = [];\n            }\n\n            loadingURL4Modules[moduleSrc].push(moduleId);\n            createScript(moduleSrc, moduleId, function () {\n                if (shimConf) {\n                    var exports;\n                    if (typeof shimConf.init === 'function') {\n                        exports = shimConf.init.apply(\n                            global,\n                            modGetModulesExports(shimDeps, BUILDIN_MODULE)\n                        );\n                    }\n\n                    if (exports == null && shimConf.exports) {\n                        exports = global;\n                        var exportsSegs = shimConf.exports.split('.');\n                        for (var i = 0, l = exportsSegs.length; i < l; i++) {\n                            exports = exports[exportsSegs[i]];\n                            if (!exports) {\n                                break;\n                            }\n                        }\n                    }\n\n                    globalDefine(moduleId, shimDeps, function () {\n                        return exports || {};\n                    });\n                }\n                else {\n                    modCompletePreDefine(loadingURL4Modules[moduleSrc]);\n                }\n\n                modAutoDefine();\n            });\n            /* eslint-enable no-use-before-define */\n        }\n\n    }\n\n    /**\n     * 加载资源\n     *\n     * @inner\n     * @param {string} pluginAndResource 插件与资源标识\n     * @param {string} baseId 当前环境的模块标识\n     */\n    function loadResource(pluginAndResource, baseId) {\n        /* eslint-disable no-use-before-define */\n        var bundleModuleId = bundleIdRetrieve(pluginAndResource);\n        if (bundleModuleId) {\n            loadModule(bundleModuleId);\n            return;\n        }\n        /* eslint-enable no-use-before-define */\n\n        var idInfo = parseId(pluginAndResource);\n        var resource = {\n            id: pluginAndResource,\n            state: MODULE_ANALYZED\n        };\n        modModules[pluginAndResource] = resource;\n\n        /**\n         * plugin加载完成的回调函数\n         *\n         * @inner\n         * @param {*} value resource的值\n         */\n        function pluginOnload(value) {\n            resource.exports = value || true;\n            modDefined(pluginAndResource);\n        }\n\n        /* jshint ignore:start */\n        /**\n         * 该方法允许plugin使用加载的资源声明模块\n         *\n         * @param {string} id 模块id\n         * @param {string} text 模块声明字符串\n         */\n        pluginOnload.fromText = function (id, text) {\n            new Function(text)();\n            modCompletePreDefine([id]);\n        };\n        /* jshint ignore:end */\n\n        /**\n         * 加载资源\n         *\n         * @inner\n         * @param {Object} plugin 用于加载资源的插件模块\n         */\n        function load(plugin) {\n            var pluginRequire = baseId\n                ? modModules[baseId].require\n                : actualGlobalRequire;\n\n            plugin.load(\n                idInfo.res,\n                pluginRequire,\n                pluginOnload,\n                moduleConfigGetter.call({id: pluginAndResource})\n            );\n        }\n\n        load(actualGlobalRequire(idInfo.mod));\n    }\n\n    /**\n     * 配置require\n     *\n     * @param {Object} conf 配置对象\n     */\n    globalRequire.config = function (conf) {\n        if (conf) {\n            for (var key in conf) {\n                var newValue = conf[key];\n                var oldValue = requireConf[key];\n\n                if (key.indexOf('on') === 0) {\n                    requireConf[key] = newValue;\n                }\n                else if (key === 'urlArgs' && typeof newValue === 'string') {\n                    requireConf.urlArgs['*'] = newValue;\n                }\n                // 简单的多处配置还是需要支持，所以配置实现为支持二级mix\n                else if (oldValue instanceof Array) {\n                    oldValue.push.apply(oldValue, newValue);\n                }\n                else if (oldValue != null) {\n                    if (typeof oldValue === 'object') {\n                        for (var k in newValue) {\n                            oldValue[k] = newValue[k];\n                        }\n                    }\n                    else {\n                        requireConf[key] = newValue;\n                    }\n                }\n            }\n\n            createConfIndex();\n        }\n    };\n\n    // 初始化时需要创建配置索引\n    createConfIndex();\n\n    /**\n     * paths内部索引\n     *\n     * @inner\n     * @type {Array}\n     */\n    var pathsIndex;\n\n    /**\n     * packages内部索引\n     *\n     * @inner\n     * @type {Array}\n     */\n    var packagesIndex = [];\n\n    /**\n     * mapping内部索引\n     *\n     * @inner\n     * @type {Array}\n     */\n    var mappingIdIndex;\n\n    /**\n     * bundles内部索引\n     *\n     * @inner\n     * @type {Object}\n     */\n    var bundlesIndex;\n\n    var bundlesRegExpIndex;\n\n    /**\n     * urlArgs内部索引\n     *\n     * @inner\n     * @type {Array}\n     */\n    var urlArgsIndex;\n\n    /**\n     * 将key为module id prefix的Object，生成数组形式的索引，并按照长度和字面排序\n     *\n     * @inner\n     * @param {Object} value 源值\n     * @param {boolean} allowAsterisk 是否允许*号表示匹配所有\n     * @return {Array} 索引对象\n     */\n    function createKVSortedIndex(value, allowAsterisk) {\n        var index = [];\n        for (var key in value) {\n            if (value.hasOwnProperty(key)) {\n                index.push({\n                    k: key,\n                    v: value[key],\n                    reg: key === '*' && allowAsterisk\n                        ? /^/\n                        : createPrefixRegexp(key)\n                });\n            }\n        }\n\n        index.sort(descSorterByKOrName);\n        return index;\n    }\n\n    /**\n     * 创建配置信息内部索引\n     *\n     * @inner\n     */\n    function createConfIndex() {\n        requireConf.baseUrl = requireConf.baseUrl.replace(/\\/$/, '') + '/';\n\n        // create paths index\n        pathsIndex = createKVSortedIndex(requireConf.paths);\n\n        // create mappingId index\n        mappingIdIndex = createKVSortedIndex(requireConf.map, 1);\n        var mappingIdIndexLen = mappingIdIndex.length;\n        var lastMapItem = mappingIdIndex[mappingIdIndexLen - 1];\n        var lastMapItemMatchAll = lastMapItem && lastMapItem.k === '*';\n\n        while (mappingIdIndexLen--) {\n            var item = mappingIdIndex[mappingIdIndexLen];\n            item.v = createKVSortedIndex(item.v);\n            if (lastMapItemMatchAll && item !== lastMapItem) {\n                item.v = item.v.concat(lastMapItem.v);\n            }\n        }\n\n        // create packages index\n        var packageNames = {};\n        var packageLen = requireConf.packages.length;\n\n        packagesIndex = [];\n        while (packageLen--) {\n            var packageConf = requireConf.packages[packageLen];\n            var pkg;\n\n            switch (typeof packageConf) {\n                case 'string':\n                    pkg = {\n                        name: packageConf.split('/')[0],\n                        location: packageConf\n                    };\n                    break;\n\n                case 'object':\n                    pkg = {\n                        name: packageConf.name,\n                        location: packageConf.location,\n                        main: packageConf.main\n                    };\n                    break;\n            }\n\n            if (packageNames[pkg.name]) {\n                continue;\n            }\n            packageNames[pkg.name] = 1;\n\n            pkg.location = pkg.location || pkg.name;\n            pkg.main = (pkg.main || 'main').replace(/\\.js$/i, '');\n            pkg.reg = createPrefixRegexp(pkg.name);\n            packagesIndex.push(pkg);\n        }\n\n        packagesIndex.sort(descSorterByKOrName);\n\n        // create urlArgs index\n        urlArgsIndex = createKVSortedIndex(requireConf.urlArgs, 1);\n\n        // create bundles index\n        bundlesIndex = {};\n        bundlesRegExpIndex = [];\n        for (var key in requireConf.bundles) {\n            var bundlesItems = requireConf.bundles[key];\n\n            if (bundlesItems instanceof Array) {\n                for (var i = 0, l = bundlesItems.length; i < l; i++) {\n                    var bundleId = bundlesItems[i];\n\n                    if (bundleId instanceof RegExp) {\n                        bundlesRegExpIndex.push([bundleId, key]);\n                    }\n                    else {\n                        bundlesIndex[resolvePackageId(bundleId)] = normalize(key);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 检索对应的bundle模块\n     *\n     * @inner\n     * @param {string} id 模块id\n     * @return {string}\n     */\n    function bundleIdRetrieve(id) {\n        var bundleId = bundlesIndex[id];\n\n        if (!bundleId && bundlesRegExpIndex) {\n            for (var i = 0, l = bundlesRegExpIndex.length; i < l; i++) {\n                var index = bundlesRegExpIndex[i];\n                if (index[0].test(id)) {\n                    bundleId = index[1];\n                    break;\n                }\n            }\n        }\n\n        return bundleId;\n    }\n\n    /**\n     * 对配置信息的索引进行检索\n     *\n     * @inner\n     * @param {string} value 要检索的值\n     * @param {Array} index 索引对象\n     * @param {Function} hitBehavior 索引命中的行为函数\n     */\n    function indexRetrieve(value, index, hitBehavior) {\n        if (index) {\n            for (var i = 0, l = index.length; i < l; i++) {\n                var item = index[i];\n                if (item.reg.test(value)) {\n                    hitBehavior(item.v, item.k, item);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * 将`模块标识+'.extension'`形式的字符串转换成相对的url\n     *\n     * @inner\n     * @param {string} source 源字符串\n     * @param {string} baseId 当前module id\n     * @return {string} url\n     */\n    function toUrl(source, baseId) {\n        // 分离 模块标识 和 .extension\n        var extReg = /(\\.[a-z0-9]+)$/i;\n        var queryReg = /(\\?[^#]*)$/;\n        var extname = '';\n        var id = source;\n        var query = '';\n\n        if (queryReg.test(source)) {\n            query = RegExp.$1;\n            source = source.replace(queryReg, '');\n        }\n\n        if (extReg.test(source)) {\n            extname = RegExp.$1;\n            id = source.replace(extReg, '');\n        }\n\n        if (baseId != null) {\n            id = normalize(id, baseId);\n        }\n\n        var url = id;\n\n        // paths处理和匹配\n        var isPathMap;\n        indexRetrieve(id, pathsIndex, function (value, key) {\n            url = url.replace(key, value);\n            isPathMap = 1;\n        });\n\n        // packages处理和匹配\n        if (!isPathMap) {\n            indexRetrieve(id, packagesIndex, function (value, key, item) {\n                url = url.replace(item.name, item.location);\n            });\n        }\n\n        // 相对路径时，附加baseUrl\n        if (!/^([a-z]{2,10}:\\/)?\\//i.test(url)) {\n            url = requireConf.baseUrl + url;\n        }\n\n        // 附加 .extension 和 query\n        url += extname + query;\n\n        // urlArgs处理和匹配\n        indexRetrieve(id, urlArgsIndex, function (value) {\n            url += (url.indexOf('?') > 0 ? '&' : '?') + value;\n        });\n\n        return url;\n    }\n\n    /**\n     * 创建local require函数\n     *\n     * @inner\n     * @param {number} baseId 当前module id\n     * @return {Function} local require函数\n     */\n    function createLocalRequire(baseId) {\n        var requiredCache = {};\n\n        function parseIds(ids, flagState) {\n            // 分析是否有resource，取出pluginModule先\n            var pureModules = [];\n            var normalizedIds = [];\n\n            if (ids instanceof Array) {\n                for (var i = 0, l = ids.length; i < l; i++) {\n                    var id = ids[i];\n                    var idInfo = parseId(id);\n                    var absId = normalize(idInfo.mod, baseId);\n                    var resId = idInfo.res;\n                    var normalizedId = absId;\n\n                    if (resId) {\n                        var trueResId = absId + '!' + resId;\n                        if (resId.indexOf('.') !== 0 && bundleIdRetrieve(trueResId)) {\n                            absId = normalizedId = trueResId;\n                        }\n                        else {\n                            normalizedId = null;\n                        }\n                    }\n\n                    normalizedIds[i] = normalizedId;\n                    modFlagAuto(absId, flagState);\n                    pureModules.push(absId);\n                }\n            }\n\n            return {\n                mods: pureModules,\n                ids: normalizedIds\n            };\n        }\n\n        function req(requireId, callback) {\n            if (typeof requireId === 'string') {\n                if (!requiredCache[requireId]) {\n                    var topLevelId = normalize(requireId, baseId);\n\n                    // 根据 https://github.com/amdjs/amdjs-api/wiki/require\n                    // It MUST throw an error if the module has not\n                    // already been loaded and evaluated.\n                    modTryInvokeFactory(topLevelId);\n                    if (!modIs(topLevelId, MODULE_DEFINED)) {\n                        throw new Error('[MODULE_MISS]\"' + topLevelId + '\" is not exists!');\n                    }\n\n                    requiredCache[requireId] = modModules[topLevelId].exports;\n                }\n\n                return requiredCache[requireId];\n            }\n\n            if (requireId instanceof Array) {\n                var parseResult = parseIds(requireId, MODULE_DEFINED);\n\n                // 加载模块\n                nativeAsyncRequire(\n                    parseResult.mods,\n                    function () {\n                        /* jshint ignore:start */\n                        for (var i = 0, l = parseResult.ids.length; i < l; i++) {\n                            var id = parseResult.ids[i];\n                            if (id == null) {\n                                id = parseResult.ids[i] = normalize(requireId[i], baseId);\n                                modFlagAuto(id, MODULE_DEFINED);\n                            }\n                        }\n                        /* jshint ignore:end */\n\n                        // modAutoDefine中，factory invoke可能发生错误\n                        // 从而导致nativeAsyncRequire没有被调用，callback没挂上\n                        // 所以nativeAsyncRequire要先运行\n                        nativeAsyncRequire(parseResult.ids, callback, baseId);\n                        modAutoDefine();\n                    },\n                    baseId\n                );\n\n                modAutoDefine();\n            }\n        }\n\n        /**\n         * 将[module ID] + '.extension'格式的字符串转换成url\n         *\n         * @inner\n         * @param {string} id 符合描述格式的源字符串\n         * @return {string} url\n         */\n        req.toUrl = function (id) {\n            return toUrl(id, baseId || '');\n        };\n\n        /**\n         * 加载模块。load only，不执行factory define\n         *\n         * @inner\n         * @param {Array} ids 模块id数组，\n         * @param {Function=} callback 加载完成的回调函数\n         */\n        req.fetch = function (ids, callback) {\n            var finishedLen = 0;\n            function fetchFinish() {\n                finishedLen++;\n                if (finishedLen >= ids.length) {\n                    callback();\n                }\n            }\n\n            var parseResult = parseIds(ids, MODULE_PREPARED);\n            for (var i = 0, l = parseResult.mods.length; i < l; i++) {\n                modAddListener(parseResult.mods[i], MODULE_PREPARED, fetchFinish);\n            }\n\n            // 加载模块\n            nativeAsyncRequire(parseResult.mods);\n\n            modAutoDefine();\n        };\n\n        return req;\n    }\n\n    /**\n     * id normalize化\n     *\n     * @inner\n     * @param {string} id 需要normalize的模块标识\n     * @param {string} baseId 当前环境的模块标识\n     * @return {string} normalize结果\n     */\n    function normalize(id, baseId) {\n        if (!id) {\n            return '';\n        }\n\n        baseId = baseId || '';\n        var idInfo = parseId(id);\n        if (!idInfo) {\n            return id;\n        }\n\n        var resourceId = idInfo.res;\n        var moduleId = relative2absolute(idInfo.mod, baseId);\n\n        // 根据config中的map配置进行module id mapping\n        indexRetrieve(\n            baseId,\n            mappingIdIndex,\n            function (value) {\n                indexRetrieve(\n                    moduleId,\n                    value,\n                    function (mdValue, mdKey) {\n                        moduleId = moduleId.replace(mdKey, mdValue);\n                    }\n                );\n            }\n        );\n\n        moduleId = resolvePackageId(moduleId);\n\n        if (resourceId) {\n            var mod = modIs(moduleId, MODULE_DEFINED) && actualGlobalRequire(moduleId);\n            resourceId = mod && mod.normalize\n                ? mod.normalize(\n                    resourceId,\n                    function (resId) {\n                        return normalize(resId, baseId);\n                    }\n                  )\n                : normalize(resourceId, baseId);\n\n            moduleId += '!' + resourceId;\n        }\n\n        return moduleId;\n    }\n\n    /**\n     * 对id进行package解析\n     * 如果是package，则附加主模块id\n     *\n     * @inner\n     * @param {string} id 模块id\n     * @return {string} 解析后的id\n     */\n    function resolvePackageId(id) {\n        for (var i = 0, l = packagesIndex.length; i < l; i++) {\n            var packageConf = packagesIndex[i];\n            var name = packageConf.name;\n\n            if (name === id) {\n                return name + '/' + packageConf.main;\n            }\n        }\n\n        return id;\n    }\n\n    /**\n     * 相对id转换成绝对id\n     *\n     * @inner\n     * @param {string} id 要转换的相对id\n     * @param {string} baseId 当前所在环境id\n     * @return {string} 绝对id\n     */\n    function relative2absolute(id, baseId) {\n        if (id.indexOf('.') !== 0) {\n            return id;\n        }\n\n        var segs = baseId.split('/').slice(0, -1).concat(id.split('/'));\n        var res = [];\n        for (var i = 0; i < segs.length; i++) {\n            var seg = segs[i];\n\n            switch (seg) {\n                case '.':\n                    break;\n                case '..':\n                    if (res.length && res[res.length - 1] !== '..') {\n                        res.pop();\n                    }\n                    else { // allow above root\n                        res.push(seg);\n                    }\n                    break;\n                default:\n                    seg && res.push(seg);\n            }\n        }\n\n        return res.join('/');\n    }\n\n    /**\n     * 解析id，返回带有module和resource属性的Object\n     *\n     * @inner\n     * @param {string} id 标识\n     * @return {Object} id解析结果对象\n     */\n    function parseId(id) {\n        var segs = id.split('!');\n\n        if (segs[0]) {\n            return {\n                mod: segs[0],\n                res: segs[1]\n            };\n        }\n    }\n\n    /**\n     * 创建id前缀匹配的正则对象\n     *\n     * @inner\n     * @param {string} prefix id前缀\n     * @return {RegExp} 前缀匹配的正则对象\n     */\n    function createPrefixRegexp(prefix) {\n        return new RegExp('^' + prefix + '(/|$)');\n    }\n\n    /**\n     * 根据元素的k或name项进行数组字符数逆序的排序函数\n     *\n     * @inner\n     * @param {Object} a 要比较的对象a\n     * @param {Object} b 要比较的对象b\n     * @return {number} 比较结果\n     */\n    function descSorterByKOrName(a, b) {\n        var aValue = a.k || a.name;\n        var bValue = b.k || b.name;\n\n        if (bValue === '*') {\n            return -1;\n        }\n\n        if (aValue === '*') {\n            return 1;\n        }\n\n        return bValue.length - aValue.length;\n    }\n\n    // 感谢requirejs，通过currentlyAddingScript兼容老旧ie\n    //\n    // For some cache cases in IE 6-8, the script executes before the end\n    // of the appendChild execution, so to tie an anonymous define\n    // call to the module name (which is stored on the node), hold on\n    // to a reference to this node, but clear after the DOM insertion.\n    var currentlyAddingScript;\n    var interactiveScript;\n\n    /**\n     * 获取当前script标签\n     * 用于ie下define未指定module id时获取id\n     *\n     * @inner\n     * @return {HTMLScriptElement} 当前script标签\n     */\n    function getCurrentScript() {\n        if (currentlyAddingScript) {\n            return currentlyAddingScript;\n        }\n        else if (\n            interactiveScript\n            && interactiveScript.readyState === 'interactive'\n        ) {\n            return interactiveScript;\n        }\n\n        var scripts = document.getElementsByTagName('script');\n        var scriptLen = scripts.length;\n        while (scriptLen--) {\n            var script = scripts[scriptLen];\n            if (script.readyState === 'interactive') {\n                interactiveScript = script;\n                return script;\n            }\n        }\n    }\n\n    var headElement = document.getElementsByTagName('head')[0];\n    var baseElement = document.getElementsByTagName('base')[0];\n    if (baseElement) {\n        headElement = baseElement.parentNode;\n    }\n\n    function createScript(src, moduleId, onload) {\n        if (loadingURLs[src]) {\n            return;\n        }\n\n        loadingURLs[src] = 1;\n\n        // 创建script标签\n        //\n        // 这里不挂接onerror的错误处理\n        // 因为高级浏览器在devtool的console面板会报错\n        // 再throw一个Error多此一举了\n        var script = document.createElement('script');\n        script.setAttribute('data-src', src);\n        script.src = src;\n        script.async = true;\n        if (script.readyState) {\n            script.onreadystatechange = innerOnload;\n        }\n        else {\n            script.onload = innerOnload;\n        }\n\n        var onNodeCreated = requireConf.onNodeCreated;\n        if (typeof onNodeCreated === 'function') {\n            onNodeCreated(script, requireConf, moduleId, src);\n        }\n\n        function innerOnload() {\n            var readyState = script.readyState;\n            if (\n                typeof readyState === 'undefined'\n                || /^(loaded|complete)$/.test(readyState)\n            ) {\n                script.onload = script.onreadystatechange = null;\n                script = null;\n\n                onload();\n            }\n        }\n        currentlyAddingScript = script;\n\n        // If BASE tag is in play, using appendChild is a problem for IE6.\n        // See: http://dev.jquery.com/ticket/2709\n        baseElement\n            ? headElement.insertBefore(script, baseElement)\n            : headElement.appendChild(script);\n\n        currentlyAddingScript = null;\n    }\n\n    // 暴露全局对象\n    // 可能碰到其他形式的loader，所以，不要覆盖人家\n    if (!define) {\n        define = globalDefine;\n\n        if (typeof require !== 'function') {\n            globalRequire.config(require);\n            require = globalRequire;\n        }\n\n        if (typeof esl !== 'function') {\n            globalRequire.config(esl);\n            esl = globalRequire;\n        }\n\n        if (typeof requirejs !== 'undefined' && typeof requirejs !== 'function') {\n            globalRequire.config(requirejs); // eslint-disable-line\n        }\n    }\n\n    // data-main\n    var mainModule;\n    (function () {\n        var scripts = document.getElementsByTagName('script');\n        var len = scripts.length;\n\n        while (len--) {\n            var script = scripts[len];\n            if ((mainModule = script.getAttribute('data-main'))) {\n                break;\n            }\n        }\n    })();\n\n    mainModule && setTimeout(function () {\n        globalRequire([mainModule]);\n    }, 4);\n})(this);\n"]}